#!/usr/bin/env escript
%% -*- erlang -*-
%%! -pz ebin

-define(DEFAULT_CA_PATH, "priv/pem/ca.pem").
-define(DEFAULT_KEY_PATH, "priv/pem/key.pem").

prompt_passwd() ->
    case io:get_line("Private key password: ") of
        {error,Rsn} ->
            exit(Rsn);
        "\n" ->
            io:format("error: empty password not allowed!~n"),
            prompt_passwd();
        Any ->
            Passwd = string:chomp(Any),
            if
                length(Passwd) < 8 ->
                    io:format("error: password too short!~n"),
                    prompt_passwd();
                true ->
                    Passwd
            end
    end.

prompt_new_file(Prompt, Default) ->
    L = io_lib:format("~s (default: ~s): ", [Prompt,Default]),
    case io:get_line(L) of
        {error,Rsn} ->
            exit(Rsn);
        Any ->
            Path = case Any of
                       "\n" -> Default;
                       _ -> string:chomp(Any)
                   end,
            case file:read_file_info(Path) of
                {ok,_} ->
                    io:format("error: path (~s) already exists~n"
                              ++ "*** Please delete ~s and rerun this script.~n",
                              [Path,Path]),
                    exit(eexist);
                {error,enoent} ->
                    Path;
                {error,Rsn} ->
                    exit(Rsn)
            end
    end.

genpem() ->
    CAPath = prompt_new_file("CA cert path", ?DEFAULT_CA_PATH),
    KeyPath = prompt_new_file("CA key path", ?DEFAULT_KEY_PATH),
    Passwd = prompt_passwd(),
    {ok,CAFile} = file:open(CAPath,[exclusive]),
    {ok,KeyFile} = file:open(KeyPath,[exclusive]),
    {CertPem,KeyPem} = forger_lib:generate_ca_pair(Passwd),
    file:write(CAFile,CertPem),
    file:close(CAFile),
    file:write(KeyFile,KeyPem),
    file:close(KeyFile),
    io:format("Done.~n"),
    0.

main([]) ->
    try genpem() catch eexist -> 1 end.
